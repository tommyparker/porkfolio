---
const { title, client, url, thumbnail, categories = [], index } = Astro.props;
import { Image } from 'astro:assets';

const size = thumbnail?.size || 'small';
const focus = thumbnail?.focus || 'center';

const loadingType = index < 8 ? "eager" : "lazy";
---

<a 
  href={url} 
  class={`thumbnail ${size} ${focus} group block opacity-0`}
  data-index={index}
  data-categories={categories.join(',')}
>
  <div class="thumbnail-image-container">
    {thumbnail.playbackId ? (
      <div class="relative w-full h-full">
        <Image 
          src={thumbnail.url}
          inferSize
          alt={thumbnail.alt}
          class="absolute inset-0 w-full h-full object-cover"
          sizes="(min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw"
          loading={loadingType}
        />
        <mux-player
          playback-id={thumbnail.playbackId}
          stream-type="on-demand"
          min-resolution="720p"
          autoplay
          muted
          loop
          playsinline
          class="absolute inset-0 w-full h-full"
        />
      </div>
    ) : (
      <Image 
        src={thumbnail.url}
        inferSize
        alt={thumbnail.alt}
        sizes="(min-width: 1024px) 33vw, (min-width: 768px) 50vw, 100vw"
        loading={loadingType}
      />
    )}
  </div>
  <div class="project-meta">
    <p class="project-title">{title}</p>
    {client && (
      <>
        <span>â€¢</span>
        <p class="project-client">{client.split('\n')[0].trim()}</p>
      </>
    )}
  </div>
</a>

<script>
  import { animate, stagger, inView, hover } from "motion";
  
  function init() {
    // Initial stagger animation on load
    animate(
      ".thumbnail",
      { opacity: [0, 1], y: [16, 0] },
      { 
        delay: stagger(0.15),
        duration: 0.3,
        easing: [0.75, 0, 0.25, 1]
      }
    );

    // Scroll-triggered animation for thumbnails that come into view later
    inView(".thumbnail", ({ target }) => {
      animate(
        target,
        { opacity: [0, 15], y: [16, 0] },
        { duration: 0.3, easing: [0.75, 0, 0.25, 1] }
      );
    });

    // Project meta on hover - moved to parent element
    hover(".thumbnail", (element) => {
      const meta = element.querySelector('.project-meta');
      
      // Animate both the scale and meta simultaneously
      animate(meta, { opacity: 1 }, { duration: 0, easing: [0.75, 0, 0.25, 1] });

      return () => {
        animate(meta, { opacity: 0 }, { duration: 0, easing: [0.75, 0, 0.25, 1] });
      };
    });

    // Optimize cursor following by using transform instead of left/top
    const thumbnails = document.querySelectorAll('.thumbnail');
    
    thumbnails.forEach(thumbnail => {
      const meta = thumbnail.querySelector('.project-meta');
      
      thumbnail.addEventListener('mousemove', (e) => {
        // Use requestAnimationFrame for smoother updates
        requestAnimationFrame(() => {
          meta.style.transform = `translate(${e.clientX}px, ${e.clientY}px) translate(-50%, -100%)`;
        });
      });
    });
  }

  // Initialise on first load
  init()

  // Re-initialise after swapping pages
  document.addEventListener("astro:after-swap", init)
</script>